<?php

declare(strict_types=1);

namespace Temosh\Boot;

/**
 * Class BootLoader
 *
 * Initialize composer autoloader when cli is starting.
 */
class BootLoader
{

    /**
     * @var string
     *  The name of main app class. Required for autoloader checking.
     */
    protected $appClassName = \Temosh\Console\Shell::class;

    /**
     * Returns error message for autoload fail.
     *
     * @return string
     */
    public static function getBootError(): string
    {
        $error = 'Unable to load autoload.php.'.PHP_EOL;
        $error .= 'Run composer install to fetch dependencies and write autoload.php.'.PHP_EOL;

        return $error;
    }

    /**
     * Boot ups composer autoloader.
     *
     * @param $basePath
     *  The base path of application.
     *
     * @return bool
     *  Returns true if boot process was successful, false otherwise.
     */
    public static function boot($basePath): bool
    {
        $bootLoader = new static();
        $suggestions = $bootLoader->autoloaderSuggestions($basePath);

        return $bootLoader->isAutoloaded($suggestions);
    }

    /**
     * Includes composer autoloader.
     *
     * @param array <string,string> $suggestions
     *  An array with possible composer autoload files.
     *
     * @return bool
     *  Returns true if autoloader was included and false otherwise.
     */
    protected function isAutoloaded(array $suggestions): bool
    {
        // Do nothing if autoloader was already included.
        if (class_exists($this->appClassName, false)) {
            return true;
        }

        // Try to include autoload.php generated by composer.
        foreach ($suggestions as $suggestion) {
            if (is_readable($suggestion)) {
                /** @var \Composer\Autoload\ClassLoader $classLoader */
                $classLoader = include $suggestion;

                // Make sure that autoloader works.
                if (is_a($classLoader, \Composer\Autoload\ClassLoader::class) &&
                    $classLoader->loadClass($this->appClassName)
                ) {
                    return true;
                }
            }
        }

        return false;
    }

    /**
     * Returns an array with possible composer autoload files.
     *
     * @param $basePath
     *  The base path of application.
     *
     * @return array<string,string>
     */
    protected function autoloaderSuggestions($basePath): array
    {
        return [
            // 'local' means that autoload.php is inside of Temosh.
            // That is, Temosh is its own Composer project.
            'local' => $basePath.'/vendor/autoload.php',
            // 'global' means autoload.php is outside of Temosh.
            // That is, Temosh is a dependency of a bigger project.
            'global' => $basePath.'/../../../vendor/autoload.php',
        ];
    }
}
