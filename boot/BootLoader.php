<?php

declare(strict_types=1);

namespace Temosh\Boot;

/**
 * Initializes composer autoloader when cli is starting.
 */
class BootLoader
{
    /**
     * @var string
     *  Contains an error message for autoload fail.
     */
    public const BOOT_ERROR = 'Unable to load autoload.php.' . PHP_EOL .
    'Run composer install to fetch dependencies and write autoload.php.' . PHP_EOL;

    /**
     * @var array<string, string>
     *  Contains an array with possible composer autoload files relative to the app root.
     */
    protected const AUTOLOAD_PATHS = [
        // 'local' autoload.php inside of app (app is its own Composer project).
        'local' => 'vendor/autoload.php',
        // 'global' autoload.php outside of app (app is a dependency of a bigger project).
        'global' => '../../../vendor/autoload.php',
    ];

    /**
     * Boot ups composer autoloader.
     *
     * @param $basePath
     *  The base path of application.
     * @param $appClass
     *  The fully qualified name of the application class.
     *
     * @return bool
     *  Returns true if boot process was successful, false otherwise.
     */
    public static function boot(string $basePath, string $appClass): bool
    {
        // Do nothing if autoloader was already included.
        if (class_exists($appClass, false)) {
            return true;
        }

        // Try to include autoload.php generated by composer.
        foreach (static::AUTOLOAD_PATHS as $suggestion) {
            // Absolute path to the composer's autoload file.
            $path = "$basePath/$suggestion";

            // Do not try to include autoload file if it is not readable.
            if (!is_readable($path)) {
                continue;
            }

            /** @var \Composer\Autoload\ClassLoader $loader */
            $loader = include $path;

            // Try to load main application class with composer's autoloader.
            // Job is done if application class was loaded successfully.
            if (is_a($loader, \Composer\Autoload\ClassLoader::class) && $loader->loadClass($appClass)) {
                return true;
            }
        }

        return false;
    }
}
