<?php

declare(strict_types=1);

namespace Temosh\Boot;

/**
 * Class BootLoader
 *
 * Initialize composer autoloader when cli is starting.
 */
class BootLoader
{
    /**
     * @const string BOOT_ERROR_MSG
     *  Contains an error message for autoload fail.
     */
    public const BOOT_ERROR = 'Unable to load autoload.php.' . PHP_EOL .
    'Run composer install to fetch dependencies and write autoload.php.' . PHP_EOL;

    /**
     * @const string AUTOLOADER_CLASS
     *  Contains a fully qualified name for the autoloader class.
     */
    protected const AUTOLOADER_CLASS = \Composer\Autoload\ClassLoader::class;

    /**
     * @const string APPLICATION_CLASS
     *  Contains a fully qualified name for the application class.
     */
    protected const APPLICATION_CLASS = \Temosh\Console\Shell::class;

    /**
     * @const array<string, string> AUTOLOAD_SUGGESTIONS
     *  Contains an array with possible composer autoload files relative to the app root.
     */
    protected const AUTOLOAD_SUGGESTIONS = [
        // 'local' means that autoload.php is inside of app (app is its own Composer project).
        'local' => 'vendor/autoload.php',
        // 'global' means autoload.php is outside of app (app is a dependency of a bigger project).
        'global' => '../../../vendor/autoload.php',
    ];

    /**
     * Boot ups composer autoloader.
     *
     * @param $basePath
     *  The base path of application.
     *
     * @return bool
     *  Returns true if boot process was successful, false otherwise.
     */
    public static function boot($basePath): bool
    {
        // Do nothing if autoloader was already included.
        if (class_exists(static::APPLICATION_CLASS, false)) {
            return true;
        }

        // Try to include autoload.php generated by composer.
        foreach (static::AUTOLOAD_SUGGESTIONS as $suggestion) {
            $path = "$basePath/$suggestion";
            if (!is_readable($path)) {
                continue;
            }

            /** @var \Composer\Autoload\ClassLoader $loader */
            $loader = include $path;
            if (is_a($loader, static::AUTOLOADER_CLASS) && $loader->loadClass(static::APPLICATION_CLASS)) {
                return true;
            }
        }

        return false;
    }
}
